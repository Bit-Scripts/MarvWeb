#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { Marv } = require('../marv.js');
var app = require('../app');
var debug = require('debug')('apptest:server');
var http = require('http');
const { Server } = require('socket.io');
var token = require('../routes/index.js');
var tokenOrig = token;
const fs = require("fs");
const database = require('../db.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server);

io.on("connection", (socket) => {
  socket.on('marv', async (arg) => {
    console.log(arg.ip);
    console.log(arg.message);
    var ip = arg.ip;
    db = database.createDbConnection();
    db.serialize(() => {
      db.each(`SELECT token FROM authentification WHERE ip="${ip}"`, (error, token) => {
        console.log(token);
      });
    });
    db.close();
    console.log("token from back = " + token);
    if(token === tokenOrig) {
      const response = await Marv(arg.message);
      console.log(response);
      io.to(socket.id).emit('marv', response);
    }
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}